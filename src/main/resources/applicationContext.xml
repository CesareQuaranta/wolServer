<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">
    <!--
        Configures the location of static resources such as css files.
        Requires Spring Framework 3.0 or higher.
        
        
        Third, you must configure the Spring Data JPA. 
        If you were paying attention, you might have noticed that 
        I used the @ImportResource annotation in my application context configuration class to import additional configuration from a XML configuration file. 
        At the moment Spring Data JPA does not support Java configuration. 
        Thus, the only way to configure it is to use a XML configuration file. 
        My applicationContext.xml file looks following:
    -->
    <mvc:resources mapping="/*.html" location="/"/>
    <mvc:resources mapping="/static/**" location="/Users/pronetics/Workspace/WolClientHTML5/WebContent/"/>
 
    <!--
        Ensures that dispatcher servlet can be mapped to '/' and static resources
        are still served by the containers default servlet. Requires Spring Framework
        3.0 or higher.
    -->
    <mvc:default-servlet-handler/>
</beans>